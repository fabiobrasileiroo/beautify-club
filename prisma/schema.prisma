// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  CLIENT
  PARTNER
  ADMIN
}

enum SalonStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Models
model User {
  id                   String                 @id @default(uuid())
  clerk_id             String                 @unique
  name                 String
  email                String                 @unique
  role                 UserRole               @default(CLIENT)
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  
  // Relationships
  salon                Salon?
  subscriptions        Subscription[]
  appointments         Appointment[]
  workshop_registrations WorkshopRegistration[]

  @@map("users")
}

model Salon {
  id                   String                 @id @default(uuid())
  user_id              String                 @unique
  name                 String
  address              String
  latitude             Float
  longitude            Float
  contact_info         String
  status               SalonStatus            @default(PENDING)
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  
  // Relationships
  user                 User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  services             Service[]
  appointments         Appointment[]
  commissions          Commission[]

  @@map("salons")
}

model Service {
  id                   String                 @id @default(uuid())
  salon_id             String
  name                 String
  description          String                 @db.Text
  base_price           Float
  duration_min         Int
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  
  // Relationships
  salon                Salon                  @relation(fields: [salon_id], references: [id], onDelete: Cascade)
  appointments         Appointment[]

  @@map("services")
}

model SubscriptionPlan {
  id                   String                 @id @default(uuid())
  name                 String
  price                Float
  max_services_per_month Int?
  features             String                 @db.Text
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  
  // Relationships
  subscriptions        Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id                   String                 @id @default(uuid())
  user_id              String
  plan_id              String
  start_date           DateTime
  end_date             DateTime
  status               SubscriptionStatus     @default(ACTIVE)
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  
  // Relationships
  user                 User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  plan                 SubscriptionPlan       @relation(fields: [plan_id], references: [id])
  payments             Payment[]

  @@map("subscriptions")
}

model Appointment {
  id                   String                 @id @default(uuid())
  user_id              String
  service_id           String
  salon_id             String
  scheduled_at         DateTime
  price_charged        Float
  status               AppointmentStatus      @default(SCHEDULED)
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  
  // Relationships
  user                 User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  service              Service                @relation(fields: [service_id], references: [id], onDelete: Cascade)
  salon                Salon                  @relation(fields: [salon_id], references: [id], onDelete: Cascade)
  commission           Commission?

  @@map("appointments")
}

model Payment {
  id                   String                 @id @default(uuid())
  subscription_id      String
  amount               Float
  paid_at              DateTime?
  method               String
  status               PaymentStatus          @default(PENDING)
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  
  // Relationships
  subscription         Subscription           @relation(fields: [subscription_id], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Commission {
  id                   String                 @id @default(uuid())
  appointment_id       String                 @unique
  salon_id             String
  amount               Float
  paid_flag            Boolean                @default(false)
  paid_at              DateTime?
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  
  // Relationships
  appointment          Appointment            @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  salon                Salon                  @relation(fields: [salon_id], references: [id], onDelete: Cascade)

  @@map("commissions")
}

model Workshop {
  id                   String                 @id @default(uuid())
  title                String
  description          String                 @db.Text
  price                Float
  scheduled_at         DateTime
  capacity             Int
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  
  // Relationships
  registrations        WorkshopRegistration[]

  @@map("workshops")
}

model WorkshopRegistration {
  id                   String                 @id @default(uuid())
  user_id              String
  workshop_id          String
  registered_at        DateTime               @default(now())
  
  // Relationships
  user                 User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  workshop             Workshop               @relation(fields: [workshop_id], references: [id], onDelete: Cascade)

  @@map("workshop_registrations")
}
